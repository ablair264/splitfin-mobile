import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { collection, query, where, getDocs, doc, getDoc } from 'firebase/firestore';
import { db, auth } from '../../firebase';
import { FaShoppingCart, FaFileInvoice, FaClock, FaTimes } from 'react-icons/fa';
import './CustomerBoard.css';

interface DashboardStats {
  totalOrders: number;
  pendingOrders: number;
  outstandingInvoices: number;
}

interface Brand {
  id: string;
  name: string;
  logoUrl: string;
  color: string;
  description: string;
  tagline?: string;
}

interface CustomerData {
  firebase_uid: string;
  customer_id: string;
  customer_name?: string;
  company_name?: string;
}

export default function CustomerBoard() {
  const [stats, setStats] = useState<DashboardStats>({
    totalOrders: 0,
    pendingOrders: 0,
    outstandingInvoices: 0
  });
  const [selectedBrand, setSelectedBrand] = useState<Brand | null>(null);
  const [loading, setLoading] = useState(true);
  const [customerData, setCustomerData] = useState<CustomerData | null>(null);

  // Brand configurations with colors from your images
  const brands: Brand[] = [
    { 
      id: 'blomus', 
      name: 'blomus', 
      logoUrl: '/logos/blomus.png', 
      color: '#6B8295',
      description: 'Since our inception, we have championed clean forms, sustainable materials, and an understated elegance. Our creations eschew transient trends in favor of a philosophy: minimalism imbued with soul. Drawing inspiration from nature and the modern way of life, we seamlessly merge superior craftsmanship with functionality—for a home that not only captivates with its beauty but also resonates with an enduring sense of grace.',
      tagline: 'Allow yourself to be inspired and discover how blomus is redefining the very essence of interior and lifestyle.'
    },
    { 
      id: 'elvang', 
      name: 'elvang', 
      logoUrl: '/logos/elvang.png', 
      color: '#C4A274',
      description: 'Responsible since 2003. Premium textiles crafted with care for people and planet.',
      tagline: 'Scandinavian design meets sustainable luxury'
    },
    { 
      id: 'myflame', 
      name: 'MY FLAME', 
      logoUrl: '/logos/myflame.png', 
      color: '#F4A460',
      description: 'Scented candles with personality. Each flame tells a story.',
      tagline: 'Light up your world with unique fragrances'
    },
    { 
      id: 'rader', 
      name: 'räder', 
      logoUrl: '/logos/rader.png', 
      color: '#8B6DB5',
      description: 'Poetry for living. Bringing beauty to everyday moments.',
      tagline: 'Where design meets emotion'
    },
    { 
      id: 'remember', 
      name: 'REMEMBER', 
      logoUrl: '/logos/remember.png', 
      color: '#E6A4C4',
      description: 'Colorful design that brings joy to every space.',
      tagline: 'Making life more colorful'
    },
    { 
      id: 'relaxound', 
      name: 'RELAXOUND', 
      logoUrl: '/logos/relaxound.png', 
      color: '#6FBE89',
      description: 'Nature sounds for modern living. Bringing tranquility home.',
      tagline: 'The sound of serenity'
    }
  ];

  useEffect(() => {
    fetchDashboardData();
  }, []);

  const fetchDashboardData = async () => {
    try {
      if (!auth.currentUser) return;

      // Get customer data using Firebase UID
      const customerDoc = await getDoc(doc(db, 'customer_data', auth.currentUser.uid));
      
      if (!customerDoc.exists()) {
        console.error('No customer data found');
        return;
      }

      const customerInfo = customerDoc.data() as CustomerData;
      setCustomerData(customerInfo);

      // Fetch orders using customer_id
      const ordersQuery = query(
        collection(db, 'salesorders'),
        where('customer_id', '==', customerInfo.customer_id)
      );
      const ordersSnap = await getDocs(ordersQuery);
      
      const pendingCount = ordersSnap.docs.filter(doc => 
        ['pending', 'draft'].includes(doc.data().status?.toLowerCase() || '')
      ).length;

      // Fetch invoices using customer_id
      const invoicesQuery = query(
        collection(db, 'invoices'),
        where('customer_id', '==', customerInfo.customer_id),
        where('status', '!=', 'paid')
      );
      const invoicesSnap = await getDocs(invoicesQuery);

      setStats({
        totalOrders: ordersSnap.size,
        pendingOrders: pendingCount,
        outstandingInvoices: invoicesSnap.size
      });

    } catch (error) {
      console.error('Error fetching dashboard data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleBrandClick = (brand: Brand) => {
    setSelectedBrand(brand);
    document.body.style.overflow = 'hidden'; // Prevent scrolling when modal is open
  };

  const closeBrandModal = () => {
    setSelectedBrand(null);
    document.body.style.overflow = 'unset';
  };

  if (loading) {
    return <div className="cb-loading">Loading...</div>;
  }

  return (
    <div className="cb-container">
      {/* Metric Cards - Compact Design */}
      <div className="cb-metrics">
        <Link to="/customer/orders" className="cb-metric-card">
          <div className="cb-metric-icon">
            <FaShoppingCart />
          </div>
          <div className="cb-metric-content">
            <div className="cb-metric-value">{stats.totalOrders}</div>
            <div className="cb-metric-label">Total Orders</div>
          </div>
        </Link>

        <Link to="/customer/orders?status=pending" className="cb-metric-card cb-metric-pending">
          <div className="cb-metric-icon">
            <FaClock />
          </div>
          <div className="cb-metric-content">
            <div className="cb-metric-value">{stats.pendingOrders}</div>
            <div className="cb-metric-label">Pending Orders</div>
          </div>
        </Link>

        <Link to="/customer/invoices" className="cb-metric-card cb-metric-warning">
          <div className="cb-metric-icon">
            <FaFileInvoice />
          </div>
          <div className="cb-metric-content">
            <div className="cb-metric-value">{stats.outstandingInvoices}</div>
            <div className="cb-metric-label">Outstanding Invoices</div>
          </div>
        </Link>
      </div>

      {/* Brand Selection Grid */}
      <div className="cb-brands-grid">
        {brands.map((brand) => (
          <div
            key={brand.id}
            className="cb-brand-square"
            style={{ backgroundColor: brand.color }}
            onClick={() => handleBrandClick(brand)}
          >
            <img src={brand.logoUrl} alt={brand.name} />
          </div>
        ))}
      </div>

      {/* Bottom Action Box */}
      <div className="cb-action-box">
        <h2>Welcome to your customer portal</h2>
        <p>Select a brand above to explore our collections or use the quick links below to manage your account.</p>
        <div className="cb-quick-links">
          <Link to="/customer/new-order" className="cb-quick-link">New Order</Link>
          <Link to="/customer/catalogues" className="cb-quick-link">View Catalogues</Link>
          <Link to="/customer/invoices" className="cb-quick-link">Pay Invoice</Link>
        </div>
      </div>

      {/* Brand Modal Overlay */}
      {selectedBrand && (
        <>
          <div 
            className="cb-overlay" 
            onClick={closeBrandModal}
          />
          <div 
            className="cb-brand-modal"
            style={{ backgroundColor: selectedBrand.color }}
          >
            <button className="cb-close-button" onClick={closeBrandModal}>
              <FaTimes />
            </button>
            
            <div className="cb-modal-content">
              <div className="cb-modal-header">
                <img 
                  src={selectedBrand.logoUrl} 
                  alt={selectedBrand.name} 
                  className="cb-modal-logo"
                />
              </div>
              
              <div className="cb-modal-body">
                <p className="cb-modal-description">{selectedBrand.description}</p>
                {selectedBrand.tagline && (
                  <p className="cb-modal-tagline">{selectedBrand.tagline}</p>
                )}
                
                <div className="cb-modal-actions">
                  <Link 
                    to={`/customer/catalogues?brand=${selectedBrand.id}`}
                    className="cb-modal-button cb-button-primary"
                  >
                    View Catalogue
                  </Link>
                  <Link 
                    to={`/customer/new-order?brand=${selectedBrand.id}`}
                    className="cb-modal-button cb-button-secondary"
                  >
                    New Order
                  </Link>
                </div>
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  );
}
